@page "/roles/add-role"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Mephi.Cyber.AuthService.Core.Models
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<PageTitle>Create role</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Create role</MudText>

<MudTextField Class="mb-2" Style="width:20vw" @bind-Value="name" Label="Role name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
<MudTextField Class="mb-4" Style="width:20vw" @bind-Value="parentName" Label="Parent role name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
@*<MudTextField @bind-Value="name" Label="Outlined" Variant="Variant.Outlined"></MudTextField>*@

<MudTable Items="permissions" MultiSelection="true" @bind-SelectedItems="rolePermissions" Hover="true" SortLabel="Sort By" Elevation="0" Filter="new Func<Permission, bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Permissions</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Permission, object>(x => x.Name)">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="py-1" DataLabel="Date">@context.Name </MudTd>
        <MudTd Class="py-1">null</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 50, 100 }"/>
    </PagerContent>
</MudTable>

<MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Create(name)">Create role</MudButton>

@code {

    private string name;
    private string parentName;
    private Permission[]? permissions;
    private HashSet<Permission> rolePermissions = new();

    public async Task Create(string name)
    {
        var dict = new Dictionary<string, string>();
        dict.Add("name", name);
        dict.Add("parentName", parentName);

        foreach (var el in rolePermissions)
        {
            dict.Add("permissions[]", el.Name);
        }


        await Http.PostAsync("admin/role/create", new FormUrlEncodedContent(dict));
        NavManager.NavigateTo("/roles");
    }


    protected override async Task OnInitializedAsync()
    {
        permissions = await Http.GetFromJsonAsync<Permission[]>("admin/permission/list");
    }

    private string searchString1 = "";
    private bool FilterFunc1(Permission element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Permission element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}