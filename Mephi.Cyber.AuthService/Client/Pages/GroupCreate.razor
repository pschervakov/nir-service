@* @page "/roles/add-group" *@
@* @inject HttpClient Http *@
@* @inject NavigationManager NavManager *@
@* @using Mephi.Cyber.AuthService.Core *@
@* @using Mephi.Cyber.AuthService.Core.Models *@
@* @using System.Text.RegularExpressions *@
@* @using System.ComponentModel.DataAnnotations *@
@* *@
@* <PageTitle>Create role</PageTitle> *@
@* *@
@* <MudText Typo="Typo.h5" GutterBottom="true">Create role</MudText> *@
@* *@
@* <MudTextField Class="mb-2" Style="width:20vw" @bind-Value="name" Label="Role name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> *@
@* *@
@* $1$<MudTextField @bind-Value="name" Label="Outlined" Variant="Variant.Outlined"></MudTextField>#1# *@
@* *@
@* <MudTable Items="users" MultiSelection="true" @bind-SelectedItems="groupUsers" Hover="true" SortLabel="Sort By" Elevation="0" Filter="new Func<User, bool>(FilterFunc1)"> *@
@*     <ToolBarContent> *@
@*         <MudText Typo="Typo.h6">Users</MudText> *@
@*         <MudSpacer/> *@
@*         <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
@*     </ToolBarContent> *@
@*     <HeaderContent> *@
@*         <MudTh> *@
@*             <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.Name)">Name</MudTableSortLabel> *@
@*         </MudTh> *@
@*         <MudTh>Description</MudTh> *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd Class="py-1" DataLabel="Date">@context.Name </MudTd> *@
@*         <MudTd Class="py-1">null</MudTd> *@
@* *@
@*     </RowTemplate> *@
@*     <PagerContent> *@
@*         <MudTablePager PageSizeOptions="new int[] { 50, 100 }"/> *@
@*     </PagerContent> *@
@* </MudTable> *@
@* *@
@* <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Create(name)">Create group</MudButton> *@
@* *@
@* @code { *@
@* *@
@*     private string name; *@
@*     private User[]? users; *@
@*     private HashSet<User> groupUsers = new(); *@
@* *@
@*     public async Task Create(string name) *@
@*     { *@
@*         var dict = new Dictionary<string, string>(); *@
@*         dict.Add("name", name); *@
@*        *@
@* *@
@*         foreach (var el in groupUsers) *@
@*         { *@
@*             dict.Add("users[]", el.Name); *@
@*         } *@
@* *@
@* *@
@*         await Http.PostAsync("admin/group/create", new FormUrlEncodedContent(dict)); *@
@*         NavManager.NavigateTo("/groups"); *@
@*     } *@
@* *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         users = await Http.GetFromJsonAsync<User[]>("admin/user/list"); *@
@*     } *@
@* *@
@*     private string searchString1 = ""; *@
@*     private bool FilterFunc1(User element) => FilterFunc(element, searchString1); *@
@* *@
@*     private bool FilterFunc(User element, string searchString) *@
@*     { *@
@*         if (string.IsNullOrWhiteSpace(searchString)) *@
@*             return true; *@
@*         if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) *@
@*             return true; *@
@*         if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) *@
@*             return true; *@
@*         return false; *@
@*     } *@
@* *@
@* } *@